# Local Development Setup Script for Persona Bot (PowerShell)
# This script helps set up local development permissions for Azure OpenAI

Write-Host "ü§ñ Persona Bot - Local Development Setup" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green

# Check if Azure CLI is installed
try {
    az --version | Out-Null
} catch {
    Write-Host "‚ùå Azure CLI is not installed. Please install it first:" -ForegroundColor Red
    Write-Host "   https://docs.microsoft.com/en-us/cli/azure/install-azure-cli" -ForegroundColor Yellow
    exit 1
}

# Check if user is logged in
try {
    az account show | Out-Null
} catch {
    Write-Host "üîê Please login to Azure first:" -ForegroundColor Yellow
    az login
}

# Get current subscription
$subscriptionId = az account show --query id -o tsv
$subscriptionName = az account show --query name -o tsv
Write-Host "üìã Current subscription: $subscriptionName ($subscriptionId)" -ForegroundColor Cyan

# Prompt for resource details
Write-Host ""
Write-Host "Please provide the following information:" -ForegroundColor Yellow
$userEmail = Read-Host "üìß Your Azure user email"
$resourceGroup = Read-Host "üè¢ Resource group name"
$openAiResourceName = Read-Host "üß† Azure OpenAI resource name"

Write-Host ""
Write-Host "üîç Validating inputs..." -ForegroundColor Yellow

# Get user object ID
try {
    $userObjectId = az ad user show --id $userEmail --query id -o tsv
    if (-not $userObjectId) { throw }
} catch {
    Write-Host "‚ùå Error: Could not find user with email $userEmail" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Found user: $userEmail (ID: $userObjectId)" -ForegroundColor Green

# Check if resource group exists
try {
    az group show --name $resourceGroup | Out-Null
} catch {
    Write-Host "‚ùå Error: Resource group '$resourceGroup' does not exist" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Found resource group: $resourceGroup" -ForegroundColor Green

# Check if OpenAI resource exists
try {
    az cognitiveservices account show --name $openAiResourceName --resource-group $resourceGroup | Out-Null
} catch {
    Write-Host "‚ùå Error: Azure OpenAI resource '$openAiResourceName' does not exist in resource group '$resourceGroup'" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Found Azure OpenAI resource: $openAiResourceName" -ForegroundColor Green

# Create role assignment
Write-Host ""
Write-Host "üîë Assigning 'Cognitive Services OpenAI User' role..." -ForegroundColor Yellow

$resourceScope = "/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.CognitiveServices/accounts/$openAiResourceName"

try {
    az role assignment create --assignee $userObjectId --role "Cognitive Services OpenAI User" --scope $resourceScope | Out-Null
    Write-Host "‚úÖ Successfully assigned role to $userEmail" -ForegroundColor Green
} catch {
    Write-Host "‚ÑπÔ∏è  Role assignment already exists or completed" -ForegroundColor Cyan
}

# Get OpenAI endpoint
$openAiEndpoint = az cognitiveservices account show --name $openAiResourceName --resource-group $resourceGroup --query properties.endpoint -o tsv

Write-Host ""
Write-Host "üìù Creating .env file..." -ForegroundColor Yellow

# Create .env file
$envContent = @"
# Azure OpenAI Configuration (Managed Identity)
# Generated by setup script on $(Get-Date)

AZURE_OPENAI_ENDPOINT=$openAiEndpoint
AZURE_OPENAI_API_VERSION=2024-08-01-preview
AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4o-mini
"@

$envContent | Out-File -FilePath "../webapp/.env" -Encoding UTF8

Write-Host "‚úÖ Created .env file at webapp/.env" -ForegroundColor Green

Write-Host ""
Write-Host "üéâ Setup complete! You can now run the application locally:" -ForegroundColor Green
Write-Host ""
Write-Host "   cd webapp" -ForegroundColor Cyan
Write-Host "   pip install -r requirements.txt" -ForegroundColor Cyan
Write-Host "   streamlit run app.py" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìö For more information, see the README.md file" -ForegroundColor Yellow